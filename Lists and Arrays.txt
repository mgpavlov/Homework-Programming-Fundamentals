0  1  2  3  4
10 20 30 40 50
rollRight 200000000000 times
end

reverse from 1 count 3
rollLeft 3 times
sort from 7 count 3
end

Revers List<>, Array[];
-----------------------
ist<string> list
            var tokens = commands.Split();
            var startIndex = int.Parse(tokens[2]);
            var count = int.Parse(tokens[4]);
            var endIndex = startIndex + count - 1;
            while (startIndex < endIndex)
            {
                var oldValue = list[startIndex];
                list[startIndex] = list[endIndex];
                list[endIndex] = oldValue;
                startIndex++;
                endIndex--;
            }
-----------------ИЛИ---------------------------------
            for (int i = startIndex + count - 1; i >= startIndex; i--)
            {
                temp.Add(list[i]);
            }
            var j = 0;
            for (int i = startIndex; i < startIndex + count; i++)
            {
            list[i] = temp[j];
            j++;
            }
====================================================================
Sort List, Array
-----------------
ist<string> list
var tokens = commands.Split();
var startIndex = int.Parse(tokens[2]);
var count = int.Parse(tokens[4]);
var temp = new List<string>();

for (int i = startIndex; i < startIndex + count; i++)
{
    temp.Add(list[i]);
}
var j = 0;
temp = temp.OrderBy(x => x).ToList();
for (int i = startIndex; i < startIndex + count; i++)
{
    list[i] = temp[j];
    j++;
}
-------------ИЛИ---------------
======================================================================
RollRight

List<string> list
var tokens = commands.Split();
var counttt = int.Parse(tokens[1]);
var count = counttt % list.Count;
var temp = new List<string>();


    for (int i = 0; i < list.Count; i++)
    {
        temp.Add(list[i]);
    }

    for (int j = 0; j < list.Count; j++)
    {
        list[j] = temp[(j + list.Count - count) % list.Count];

    }
=========================================================================
RollLeft

List<string> list
var tokens = commands.Split();
var counttt = int.Parse(tokens[1]);
var count = counttt % list.Count;
var temp = new List<string>();

for (int i = 0; i < list.Count; i++)
{
    temp.Add(list[i]);
}

for (int j = 0; j < list.Count; j++)
{

    list[j] = temp[(j + count) % list.Count];
}

=============================================================================
============================================================================
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
цялата задача с методи и манипулации на масиви и списъци

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace exam
{
    class Program
    {
        static void Main(string[] args)
        {
            var list = Console.ReadLine().Split("\t ,".ToCharArray(), StringSplitOptions.RemoveEmptyEntries).ToList();
            var commands = Console.ReadLine();
            while (!commands.Equals("end"))
            {
                if (commands.StartsWith("reverse"))
                {
                    Reverse(commands, list);
                }
                else if (commands.StartsWith("sort"))
                {
                    Sort(commands, list);
                }
                else if (commands.StartsWith("rollLeft"))
                {
                    RollLeft(commands, list);
                }
                else if (commands.StartsWith("rollRight"))
                {
                    RollRight(commands, list);
                }
                else
                {
                    Console.WriteLine("Invalid input parameters.");
                }
                commands = Console.ReadLine();
            }
            Console.WriteLine($"[{string.Join(", ", list)}]");
        }


        static void Reverse(string commands, List<string> list)
        {
            try
            {
                var tokens = commands.Split();
                var startIndex = int.Parse(tokens[2]);
                var count = int.Parse(tokens[4]);
                var temp = new List<string>();
                if (startIndex < 0 || count < 0 || startIndex + count - 1 > list.Count())
                {
                    Console.WriteLine("Invalid input parameters.");
                }
                else
                {
                    for (int i = startIndex + count - 1; i >= startIndex; i--)
                    {
                        temp.Add(list[i]);
                    }
                    var j = 0;
                    for (int i = startIndex; i < startIndex + count; i++)
                    {
                        list[i] = temp[j];
                        j++;
                    }
                }
            }
            catch (Exception)
            {

                Console.WriteLine("Invalid input parameters.");
            }

        }

        static void Sort(string commands, List<string> list)
        {
            try
            {

                var tokens = commands.Split();
                var startIndex = int.Parse(tokens[2]);
                var count = int.Parse(tokens[4]);
                var temp = new List<string>();
                if (startIndex < 0 || count < 0 || startIndex + count - 1 > list.Count())
                {
                    Console.WriteLine("Invalid input parameters.");
                }
                else
                {
                    for (int i = startIndex; i < startIndex + count; i++)
                    {
                        temp.Add(list[i]);
                    }
                    var j = 0;
                    temp = temp.OrderBy(x => x).ToList();
                    for (int i = startIndex; i < startIndex + count; i++)
                    {
                        list[i] = temp[j];
                        j++;
                    }
                }
            }
            catch (Exception)
            {
                Console.WriteLine("Invalid input parameters.");
            }

        }

        static void RollLeft(string commands, List<string> list)
        {
            try
            {
                var tokens = commands.Split();
                var counttt = int.Parse(tokens[1]);
                var count = counttt % list.Count;
                var temp = new List<string>();
                if (count <= 0)
                {
                    Console.WriteLine("Invalid input parameters.");
                }
                else
                {
                    for (int i = 0; i < list.Count; i++)
                    {
                        temp.Add(list[i]);
                    }

                    for (int j = 0; j < list.Count; j++)
                    {

                        list[j] = temp[(j + count) % list.Count];
                    }

                }
            }
            catch (Exception)
            {

                Console.WriteLine("Invalid input parameters.");
            }

        }

        static void RollRight(string commands, List<string> list)
        {
            try
            {
                var tokens = commands.Split();
                var counttt = int.Parse(tokens[1]);
                var count = counttt % list.Count;
                var temp = new List<string>();
                if (count <= 0)
                {
                    Console.WriteLine("Invalid input parameters.");
                }
                else
                {

                    for (int i = 0; i < list.Count; i++)
                    {
                        temp.Add(list[i]);
                    }

                    for (int j = 0; j < list.Count; j++)
                    {
                        list[j] = temp[(j + list.Count - count) % list.Count];

                    }
                }
            }
            catch (Exception)
            {
                Console.WriteLine("Invalid input parameters.");
            }
        }
    }
}


